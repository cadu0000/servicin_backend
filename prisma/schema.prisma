datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  INDIVIDUAL
  COMPANY
}

enum ContactType {
  EMAIL
  PHONE
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  userType  UserRole @map("user_type")
  photoUrl  String?  @map("photo_url") @db.Text

  address         Address[]
  individual      Individual?
  company         Company?
  serviceProvider ServiceProvider?
  contacts        Contact[]
  reviewsWritten  Review[]         @relation("ClientReviews")

  @@map("users")
}

model Address {
  id           String  @id @default(uuid()) @db.Uuid
  userId       String  @map("user_id") @db.Uuid
  country      String
  state        String
  city         String
  neighborhood String
  street       String
  zipCode      String  @map("zip_code")
  number       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("address")
}

model Individual {
  userId    String    @id @map("user_id") @db.Uuid
  fullName  String    @map("full_name")
  cpf       String    @unique
  birthDate DateTime? @map("birth_date") @db.Date

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("individuals")
}

model Company {
  userId        String  @id @map("user_id") @db.Uuid
  corporateName String  @map("corporate_name")
  cnpj          String  @unique
  tradeName     String? @map("trade_name")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model ServiceProvider {
  userId             String  @id @map("user_id") @db.Uuid
  serviceDescription String? @map("service_description") @db.Text
  averageRating      Decimal @default(0.00) @map("average_rating") @db.Decimal(3, 2)

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  servicesOffered ProviderService[]
  reviewsReceived Review[]          @relation("ProviderReviews")

  @@map("service_providers")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String? @db.Text

  providerServices ProviderService[]

  @@map("categories")
}

model Service {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?  @db.Text
  price       Decimal  @default(0.00) @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")

  photos    ServicePhoto[]
  providers ProviderService[]

  @@map("services")
}

model ServicePhoto {
  id        String @id @default(uuid()) @db.Uuid
  serviceId String @map("service_id") @db.Uuid
  photoUrl  String @map("photo_url") @db.Text

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_photos")
}

model ProviderService {
  providerId String    @map("provider_id") @db.Uuid
  serviceId  String    @map("service_id") @db.Uuid
  categoryId Int       @map("category_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")
  finishedAt DateTime? @map("finished_at")

  provider ServiceProvider @relation(fields: [providerId], references: [userId], onDelete: Cascade)
  service  Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  category Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([providerId, serviceId])
  @@map("provider_services")
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  providerId String   @map("provider_id") @db.Uuid
  clientId   String   @map("client_id") @db.Uuid
  rating     Decimal  @db.Decimal(2, 1)
  comment    String?  @db.Text
  createdAt  DateTime @default(now()) @map("created_at")

  provider ServiceProvider @relation("ProviderReviews", fields: [providerId], references: [userId], onDelete: Cascade)
  client   User            @relation("ClientReviews", fields: [clientId], references: [id], onDelete: Cascade)

  @@map("review")
}

model Contact {
  id     String      @id @default(uuid()) @db.Uuid
  userId String      @map("user_id") @db.Uuid
  type   ContactType
  value  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}
